#+startup: showall
#+options: toc:nil
#+begin_export html
---
layout     : post
title      : 身为TD，我的代码管理流程
categories : [TD, GIT]
tags       : [TD, GIT]
---
#+end_export
#+TOC: headlines 2

因为TD这个职位基本每天都是在撸代码，所以代码的管理也是十分必要的，这篇文章记录一下我个人的代码管理流程。其实核心思想就是对各部分文件创建独立的仓库，然后用一个主要的仓库来进行引用管理，麻烦是真的麻烦了一些，不过这样分开管理的方式我是比较喜欢的。

我的情况是这样的：

有一些现成的仓库比如博客、笔记、emacs配置还有和朋友一起分享资料的仓库。但是挨个clone下来有点累，放进一个仓库又不现实+毕竟有一些并能说的秘密+。而且经常会需要从github上clone一些别人的项目下来学习和使用，clone到当前项目是不可能的，clone到外面再复制进来嘛太麻烦。如果修改这个项目，我想pull requests也蛋疼。所以就玩了一波git submoudle，用起来感觉良好，就是有点麻烦。

* Git 基础配置

** 安装

因为是以Git进行管理，那么Git的安装也是有必须的了。通过[[https://git-scm.com/downloads][这个官方地址]]进行安装。

因为我使用的是archlinux，所以用下面的命令进行安装(上面的连接有详细介绍)

#+BEGIN_SRC shell
  pacman -S git
#+END_SRC

** ssh设置

因为我同时使用Github和Git，所以在设置ssh的时候当然也有一些技巧。

使用下面的命令来生成key，下面的邮箱我先填写自己的github帐号的注册邮箱(之前我用其他邮箱生成的key,但是在github上contributions并没有记录我的提交)。

运行命令后会让你输入ssh key的名字，这里我先填写为 id_rsa_github ，然后一通回车后就创建好了。

#+BEGIN_SRC shell
  ssh-keygen-t rsa -C"400dama@400dama.xyz"
#+END_SRC

创建好key后需要去github的[[https://github.com/settings/ssh/new][SSH设置]]里把 ~/.ssh/id_rsa_github.pub 里面的内容全部复制进key里，名字随便起，保存即可。

然后再用同样的方法创建一个Gitee的key，邮箱也填写为gitee的注册邮箱，命名为 id_rsa_gitee ， 然后去[[https://gitee.com/profile/sshkeys][SSH Key]]里进行关联，操作一样。

多个key创建好之后，需要做一个设置来让ssh能知道在什么时候使用哪个key。

在 ~/.ssh 下创建 config 文件，将下面内容复制进去修改成你的保存就行了。

#+BEGIN_SRC text
  # Github
  Host github.com
  HostName github.com
  User 400dama
  IdentityFile /home/dama/.ssh/id_rsa_github

  # Gitee
  Host gitee.com
  HostName gitee.com
  User 400dama
  IdentityFile /home/dama/.ssh/id_rsa_gitee
#+END_SRC

如果你需要在同一个平台下设置多个key，也是同样的道理，不过需要修改也下 HOST 后面的内容，类似下面。

#+BEGIN_SRC text
  # Gitee_1
  Host giteeA.com
  HostName gitee.com
  User 400dama
  IdentityFile /home/dama/.ssh/id_rsa_giteeA

  # Gitee_2
  Host giteeB.com
  HostName gitee.com
  User 400dama
  IdentityFile /home/dama/.ssh/id_rsa_giteeB
#+END_SRC

都妥了以后，就需要测试一下了。

#+BEGIN_SRC shell
  ssh -T git@gitee.com
  ssh -T git@github.com
#+END_SRC

同平台多key的测试需要修改一下(平时使用的时候也要做如下修改)。

#+BEGIN_SRC shell
  ssh -T git@giteeA.com
  ssh -T git@giteeB.com
#+END_SRC

如果返回的东西有 welcome 就说明成了，可以dun一个庆祝下了。

因为git操作网上有很多教程，而且写的都比我好，所以我就不写了。上面这个ssh的设置，是当时坑了我一下，所以总结一波。

下面直接跳到子仓库。

* 子仓库

关于 git submodule 可能翻译成子模块更合适，但我喜欢用俗气的“子仓库”来称呼它。下面我用自己的一个[[https://gitee.com/BugaoSion/400dama][仓库]]来举例。

** 添加子仓库

首先我创建一个空的仓库做为主仓库命名为test，然后使用下面的命令把我emacs的配置文件添加为子仓库。这里使用https连接而不是ssh连接，是因为ssh别人不一定有权限，可以先用https再用 git config submodule.xxx.url 来设置子仓库的url为ssh，当然如果就你自己一个人用就无所谓了(我自己就都是ssh)。

#+BEGIN_SRC shell
  git submodule add https://gitee.com/BugaoSion/damacs.git dotfiles/damacs
#+END_SRC

这样我的emacs配置仓库就添加进来了，在当前目录下的dotfiles里就能看到了。同时test目录下会生成.gitmodules文件，里面记录了子仓库的路径和名字。通过这种方式把所有需要的子仓库都添加进来，然后提交到远程仓库。

** Clone 包含子仓库的项目

现在主项目已经有了，clone下来的方法有两种，用哪个都行，我更喜欢第一个

*方法一*

#+BEGIN_SRC shell
  git clone https://gitee.com/BugaoSion/test.git
  cd test
  git submodule init
  git submodule update
#+END_SRC

*方法二*

#+BEGIN_SRC shell
  git clone https://gitee.com/BugaoSion/test.git --recursive
#+END_SRC

但是clone下来的子仓库并不在master分支，而是在一个游离状态(可以通过git branch来看当前分支)，这样就很烦了，还得手动切到master分支，真是不想用这鬼功能了！

#+BEGIN_SRC shell
  cd damacs
  git checkout master
#+END_SRC

** 修改子仓库

平时修改子仓库的文件就正常修改，修改完要先提交子仓库，如果此时仓库是游离状态，需要用下面命令提交，如果存在冲突，就按正常的来操作好了。然后退到主仓库再提交一下，因为主仓库会记录子仓库的 commit id 。

用这条强推。
#+BEGIN_SRC shell
git push origin HEAD:master
#+END_SRC
或者使用这个， eeed149 是commit id。
#+BEGIN_SRC shell
git checkout master
git cherry-pick eeed149
#+END_SRC

** 更新子仓库

提交麻烦，更新也麻烦，因为当你pull了子仓库以后，一定记得使用 git submodule update ，主仓库也是需要重新提交的，因为commit id变化了嘛。

更新可以进入子仓库正常操作，也可以这样

#+BEGIN_SRC shell
  git submodule update --remote damacs
#+END_SRC

再或者

#+BEGIN_SRC shell
  git pull --recurse-submodules
  git submodule update --remote --recursive
#+END_SRC

** 删除子仓库

有的时候需要删除子仓库，如果直接使用 rm -rf 会死掉的，正经操作如下

#+BEGIN_SRC shell
  git submodule deinit damacs
  # - 删除.gitmodules中，相关信息
  git rm --cached damacs
  rm -rf .git/modules/damacs
  rm -rf damacs
  git add .
  git commit -m "Remove damacs from test."
#+END_SRC

** 批量操作

子仓库的操作真的是烦，每个都搞一遍要死人的！所以接下来介绍也下批量操作。

#+BEGIN_SRC shell
  git submodule foreach ‘git checkout master; git pull’
#+END_SRC

这个就是之前说过的切换到master分支的骚操作，一口气把子仓库全部切换到master分支并 pull 一下。

** 其他
git 的命令有时候会很长，并过git可以为命令设置短名。

#+BEGIN_SRC text
  [alias]
    sbi = submodule init
    sbu = submodule update
    sbep = submodule foreach git pull
    sbecm = submodule foreach git checkout master
#+END_SRC

使用了子仓库一段时间，到现在是真香状态。

更详细的教程可以参考 [[https://git-scm.com/book/en/v2][Pro Git]]

#+BEGIN_QUOTE
AUTHOR:  400dama

LINK:    https://400dama.xyz/2018/09/13/td-git.html

LICENSE: 本博客所有文章除特别声明外，均采用 [[https://creativecommons.org/licenses/by-nc/4.0/][CC BY-NC 4.0]] 许可协议。转载请注明出处！
#+END_QUOTE


